<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel="stylesheet" href="/stylesheets/style.css" />

    <link
            rel="stylesheet"
            href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
    />
  </head>

  <body style="display: flex; flex-direction: column; min-height: 100vh">
    <%- include('../views/partials/header.ejs') %>
    <div style="flex: 1">
      <div class="container mt-3">
        <div class="card-deck">
          <% sightings.forEach(function(sighting) { %>
            <div
                    class="card cards mt-2"
                    style="min-width: 30vh; max-width: 16rem"
            >
              <img
                      class="card-img-top"
                      src="data:;base64,<%= sighting.img %>"
                      alt="bird image"
              />
              <div class="card-body">
                <a
                        class="card-title h5"
                        style="color: black"
                        href="/sighting/<%= sighting._id %>"
                >
                  <%= sighting.nickname %>
                </a>
                <div class="card-text">
                  <p>
                    Date and Time: <%= sighting?.dateTimeSeen?.toLocaleString() ||
                    "unspecific" %>
                  </p>
                  <p>
                    Identification: <%= sighting?.identification || "unknown" %>
                  </p>
                </div>
              </div>
            </div>
          <% }); %>
        </div>
      </div>
    </div>
    <%- include('../views/partials/footer.ejs') %>

    <script>
      let db;

      const requestIndexedDB = window.indexedDB.open("sighting_list");

      requestIndexedDB.onerror = (event) => {
        console.error("error detected", event);
      };

      // 如果有离线数据库，并且能正常打开，说明有数据在里面
      requestIndexedDB.onsuccess = (event) => {
        var db = event.target.result;

        var transaction = db.transaction(["list"], "readwrite");

        var objectStore = transaction.objectStore("list");

        // 这边是用指针的方式去你的数据库当中读取key 和 value
        var lowerBoundOpenKeyRange = IDBKeyRange.lowerBound(1, false);
        var request = objectStore.openCursor(
                lowerBoundOpenKeyRange,
                IDBCursor.PREV
        );

        request.onsuccess = (event) => {
          var cursor = event.target.result;
          if (cursor) {
            // 使用Object.assign方法是为了避免控制台打印时出错
            console.log(Object.assign(cursor.value));
            doFormRequest(cursor.value);
            cursor.continue();
          }

          // after submitting the form, then we can delete the offline database
          objectStore.delete("list");
          indexedDB.deleteDatabase("sighting_list");

          // 至于这个怎么做，你可以在 bird_list 的页面中回传 data，里面包含在线链路成功保存的信息
          // locals.save === 'failed' ???
          // locals.save === 'success' ???
        };

        request.onerror = (event) => {
          // 错误处理!
        };
      };

      // 这个方法是建立一个虚拟 form 元素，然后一一填充，
      // 最后调用 post 方法去直接调用在线链路保存数据库资料
      function doFormRequest(json) {
        var form = document.createElement("form");
        form.action = "/add";
        form.method = "post";

        // append input attribute and valus
        // 这里遍历入参
        for (var key in json) {
          // 如果你的对象有键，就创建虚拟 dom 保存数据
          if (json.hasOwnProperty(key)) {
            var val = json[key];
            input = document.createElement("input");
            input.type = "hidden"; // 隐藏不显示这个元素
            input.name = key;
            input.value = val;

            // append key-value to form
            // 把这个 input 在最后的元素上 push 进去
            form.appendChild(input);
          }
        }

        // send post request
        document.body.appendChild(form);
        // 提交表单
        form.submit();

        // remove form from document
        // 删除元素
        document.body.removeChild(form);
      }
    </script>
  </body>
</html>