<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel="stylesheet" href="/stylesheets/style.css" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
    />
    <script src="http://maps.googleapis.com/maps/api/js"></script>

    <script>
      function initialize() {
        var mapProp = {
          center: new google.maps.LatLng(51.508742, -0.12085),
          zoom: 5,
          mapTypeId: google.maps.MapTypeId.ROADMAP,
        };
        var map = new google.maps.Map(document.getElementById("map"), mapProp);
      }
      google.maps.event.addDomListener(window, "load", initialize);
    </script>
  </head>
  <body>
    <%- include('../views/partials/header.ejs') %>
    <div>
      <p>Entry is failed to save on the web database</p>
      <p>We have save the entry on the offline database</p>
      <p>
        We will save the offline data when we can connect the database as soon
        as we can
      </p>
    </div>
    <%-include('../views/partials/footer.ejs') %>

    <script>
      let db;
      let nickname = "<%- locals.nickname %>";
      let datetime = "<%- locals.datetime %>";
      let loc = "<%- locals.loc %>";
      let description = "<%- locals.description %>";
      let identification = "<%- locals.identification %>";
      let dateTimeSeen = "<%- locals.dateTimeSeen %>";
      let img = "<%- locals.myImg %>";

      console.log("trying to create a sighting_db");
      const requestIndexedDB = window.indexedDB.open("sighting_list");

      requestIndexedDB.onerror = (event) => {
        console.error("error detected", event);
      };

      requestIndexedDB.onsuccess = (event) => {
        console.log("db opened");
        db = requestIndexedDB.result;
      };

      // 这里有一个场景
      // 当没有正确打开数据库的时候，是因为没有创建数据库，调用onupgradeneeded这个方法，
      // 可以在没有数据的时候自动创建，有数据库，并且有主键的时候，就略过
      // 这个方法是保证你一定会有离线数据库的
      requestIndexedDB.onupgradeneeded = (event) => {
        console.log("upgradeneeded", event);
        db = event.target.result; // 数据库对象

        var objectStore;
        objectStore = db.createObjectStore("list", { keyPath: "nickname" });
        objectStore.createIndex("datetime", "datetime", { unique: false });
        objectStore.createIndex("dateTimeSeen", "dateTimeSeen", { unique: false });
        objectStore.createIndex("location", "location", { unique: false });
        objectStore.createIndex("description", "description", {
          unique: false,
        });
        objectStore.createIndex("identification", "identification", {
          unique: false,
        });
        objectStore.createIndex("img", "img", { unique: false });

        console.log("indexed database is created");
      };

      // 这里为什么要用 setTimeout（延时调用函数）：
      // 因为数据库不一定会在这个页面生成（渲染的时候）就同时生成数据库（在你第一次进来的时候）
      // 你的浏览器需要几十毫秒去创建一个数据库，这个时候保存的操作依赖已经生成好的数据库
      // 为了保证不出问题，我们延迟一秒钟去做保存操作
      setTimeout(() => {
        // 下面这么多点是链式调用
        const addingItem = db
          .transaction(["list"], "readwrite")
          .objectStore("list")
          .add({
            nickname: nickname,
            datetime,
            location: loc,
            description,
            identification,
            dateTimeSeen,
            img,
          });

        addingItem.onsuccess = (event) => {
          console.log("The entry has been successfully added to offline database");
        };

        addingItem.onerror = (event) => {
          console.log("write error");
        };
      }, 1000);
    </script>
  </body>
</html>
